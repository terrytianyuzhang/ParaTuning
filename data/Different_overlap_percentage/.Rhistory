rawPRS_YRI_oneSimulation[, PHENO1 := factor(PHENO1)]
#####
rawPRS_CEU_oneSimulation <- data.table(rawPRS_CEU[[simulaton_name]])
#####
rawPRS_CEU_oneSimulation[, population := 'CEU']
rawPRS_CEU_oneSimulation[, jls := normalize_PRS(jls)]
rawPRS_CEU_oneSimulation[, wls := normalize_PRS(wls)]
rawPRS_CEU_oneSimulation[, ls.cis := normalize_PRS(ls.cis)]
rawPRS_CEU_oneSimulation[, ls.trans := normalize_PRS(ls.trans)]
rawPRS_CEU_oneSimulation[, ls.CEU := ls.cis]
rawPRS_CEU_oneSimulation[, ls.YRI := ls.trans]
rawPRS_CEU_oneSimulation[, PHENO1 := factor(PHENO1)]
#####
PRS_both_population <- rbind(rawPRS_YRI_oneSimulation,
rawPRS_CEU_oneSimulation)
#####
PRS_both_population[, is.case := as.numeric((PHENO1 == 2))]
#####
#####
##NEXT SECTION PLOTS THE FDR AGAINST PRS THRESHOLD
#####
#####
FDR_all_method <- data.table()
#####
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- PRS_both_population[jls >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold),
by = population]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1 - true_positive/total_positive]
FDR_by_threshold[, method:= 'JLsum(Y&C)']
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
###########
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- PRS_both_population[ls.CEU >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold),
by = population]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1-true_positive/total_positive]
FDR_by_threshold[, method:= 'Lsum(CEU)']
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
###########
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- PRS_both_population[ls.YRI >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold),
by = population]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1-true_positive/total_positive]
FDR_by_threshold[, method:= 'Lsum(YRI)']
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
####
FDR_all_method$simulation_index <- simulation_index
#####
FDR_all_simulations <- rbind(FDR_all_simulations, FDR_all_method)
}##simulation_index
FDR_average_simulation <- FDR_all_simulations[, .(mean_FDR = mean(FDR),
mean_total_positive = mean(total_positive),
mean_true_positive = mean(true_positive)),
by = .(population, threshold, method)]
FDR_average_simulation[, mean_false_positive := mean_total_positive - mean_true_positive]
FDR_average_simulation[, plot_legend := as.factor(paste0(population,'-',method))]
FDR_average_simulation
unique(FDR_average_simulation$plot_legend)
rawPRS_YRI_oneSimulation
setwd('/Users/tianyu/Documents/ParaTuning/data/')
rawSimulationAUC <- get(load('simulations-Results-6xx-7xx-8xx01-13-2023.RData'))
rawSimulationAUC
rawSimulationAUC
rawSimulationAUC <- rawSimulationAUC[11:20]
rawSimulationAUC
setwd('/Users/tianyu/Documents/ParaTuning/data/Simulation-PRS/')
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx01-11-2023.RData'))
rawPRS_CEU <- get(load('CEU-PRS-6xx-7xx-8xx01-11-2023.RData'))
rawPRS_YRI
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx_01-13-2023.RData'))
rawPRS_YRI
rawPRS_YRI <- rawPRS_YRI[11:20]
rawPRS_YRI
rawPRS_YRI <- rawPRS_YRI[[11:20]]
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx_01-13-2023.RData'))
rawPRS_YRI <- rawPRS_YRI[[11:20]]
class(rawPRS_YRI)
rawPRS_YRI <- rawPRS_YRI[[11:20]]
rawPRS_YRI
rawPRS_YRI[[1]]
names(rawPRS_YRI)
rawPRS_YRI
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx01-11-2023.RData'))
rawPRS_YRI
rawSimulationAUC <- get(load('simulations-Results-6xx-7xx-8xx01-13-2023.RData'))
###AUC plot for the 7xx setting
setwd('/Users/tianyu/Documents/ParaTuning/data/')
rawSimulationAUC <- get(load('simulations-Results-6xx-7xx-8xx01-13-2023.RData'))
rawSimulationAUC
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx01-11-2023.RData'))
setwd('/Users/tianyu/Documents/ParaTuning/data/Simulation-PRS/')
####
rawPRS_YRI <- get(load('YRI-PRS-6xx-7xx-8xx_01-13-2023.RData'))
rawPRS_YRI
length(rawPRS_YRI)
rawPRS_YRI[[1]]
rawPRS_YRI[[2]]
# ggsave(filename = "low_heritability_FDR.pdf",
#        device = "pdf",
#        width = 120, height = 90, units = "mm")
rawSimulationAUC <- readRDS('YRI-PGS-different-h2_2023-04-07.RDS')
library(data.table)
library(pROC)
library(ggplot2)
library(ggpubr)
setwd('/Users/tianyu/Documents/ParaTuning/data/Different_overlap_percentage/')
# ggsave(filename = "low_heritability_FDR.pdf",
#        device = "pdf",
#        width = 120, height = 90, units = "mm")
rawSimulationAUC <- readRDS('YRI-PGS-different-h2_2023-04-07.RDS')
rawSimulationAUC
# ggsave(filename = "low_heritability_FDR.pdf",
#        device = "pdf",
#        width = 120, height = 90, units = "mm")
rawSimulationAUC <- readRDS('YRI-PGS-different-h2_2023-04-07.RDS')
FDR_all_simulations <- data.table()
for(testing_population in c('YRI','CEU')){
# testing_population <- 'YRI'
for(repeat_index in 0:(length(rawSimulationAUC[[testing_population]])-1)){
repitition_name <- paste0('rep.', repeat_index)
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation <- melt(raw_PRS_onesimulation,
id.vars = c("ID", "PHENO"),
variable.name = "method",
value.name = "pgs_score")
raw_PRS_onesimulation[, PHENO:= factor(PHENO)]
raw_PRS_onesimulation[, is.case := as.numeric((PHENO == 2))]
raw_PRS_onesimulation[, pgs_score := normalize_PRS(pgs_score), by = "method"]
method_names <- names(rawSimulationAUC[[testing_population]][[repitition_name]])[c(-1, -2)]
####
FDR_all_method <- data.table()
for(method_name_index in 1:length(method_names)){
method_name <- method_names[method_name_index]
#####
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- raw_PRS_onesimulation[method == method_name & pgs_score >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold)]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1 - true_positive/total_positive]
FDR_by_threshold[, method:= method_name]
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
}#one simulation
FDR_all_method$simulation_index <- repeat_index
FDR_all_method$testing_population <- testing_population
FDR_all_simulations <- rbind(FDR_all_simulations, FDR_all_method)
}#all simulations in one setting
}#both populations
FDR_average_simulation <- FDR_all_simulations[, .(mean_FDR = mean(FDR),
mean_total_positive = mean(total_positive),
mean_true_positive = mean(true_positive)),
by = .(threshold, method, testing_population)]
FDR_average_simulation[, mean_false_positive := mean_total_positive - mean_true_positive]
FDR_average_simulation[, plot_legend := as.factor(paste0(method, testing_population))]
change_name <- function(old_name){
if(old_name == 'JLSYRI'){
new_name <- 'JLS(Y&C2Y)'
}else if(old_name == 'LS.CEUYRI'){
new_name <- 'LS(C2Y)'
}else if(old_name == 'TLYRI'){
new_name <- 'TL(Y&C2Y)'
}else if(old_name == 'LS.CEUCEU'){
new_name <- 'LS(C2C)'
}else if(old_name == 'LS.YRIYRI'){
new_name <- 'LS(Y2Y)'
}else  if(old_name == 'WLSYRI'){
new_name <- 'WLS(Y&C2Y)'
}
return(new_name)
}
for(row_index in 1:nrow(FDR_average_simulation)){
FDR_average_simulation[row_index, plot_legend := as.factor(change_name(plot_legend))]
}
#####
break_names <- method_names
ggplot( data = FDR_average_simulation[plot_legend != 'WLS(Y&C2Y)'])+
geom_line(aes(x = threshold, y = mean_FDR,
group = plot_legend,
color = plot_legend))+
geom_point(aes(x = threshold, y = mean_FDR,
group = plot_legend,
shape = plot_legend,
color = plot_legend))+
theme_bw()+
# theme(legend.position = 'bottom')+
xlim(c(-2.5, 2.5))+
ylim(c(0, 0.5))+
xlab('PGS threshold')+
ylab('FDR')+
scale_color_manual(name=" ",
values=c("#a2d5c6", "#077b8a", "#5c3c92",
"#d72631","#070601", "#C2C5C6"))+
scale_shape_manual(name=" ",
values = 1:6)+
# ggtitle(paste0("Overlap percentage = ", current_overlap_percentage))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
low_heritability_FDR <- ggplot( data = FDR_average_simulation[plot_legend != 'WLS(Y&C2Y)'])+
geom_line(aes(x = threshold, y = mean_FDR,
group = plot_legend,
color = plot_legend))+
geom_point(aes(x = threshold, y = mean_FDR,
group = plot_legend,
shape = plot_legend,
color = plot_legend))+
theme_bw()+
# theme(legend.position = 'bottom')+
xlim(c(-2.5, 2.5))+
ylim(c(0, 0.5))+
xlab('PGS threshold')+
ylab('FDR')+
scale_color_manual(name=" ",
values=c("#a2d5c6", "#077b8a", "#5c3c92",
"#d72631","#070601", "#C2C5C6"))+
scale_shape_manual(name=" ",
values = 1:6)+
# ggtitle(paste0("Overlap percentage = ", current_overlap_percentage))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
series_700_FDR <- ggplot( data = FDR_average_simulation[plot_legend != 'WLS(Y&C2Y)'])+
geom_line(aes(x = threshold, y = mean_FDR,
group = plot_legend,
color = plot_legend))+
geom_point(aes(x = threshold, y = mean_FDR,
group = plot_legend,
shape = plot_legend,
color = plot_legend))+
theme_bw()+
# theme(legend.position = 'bottom')+
xlim(c(-2.5, 2.5))+
ylim(c(0, 0.5))+
xlab('PGS threshold')+
ylab('FDR')+
scale_color_manual(name=" ",
values=c("#a2d5c6", "#077b8a", "#5c3c92",
"#d72631","#070601", "#C2C5C6"))+
scale_shape_manual(name=" ",
values = 1:6)+
# ggtitle(paste0("Overlap percentage = ", current_overlap_percentage))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
FDRCombined<- ggarrange(
low_heritability_FDR, series_700_FDR,
# mainCEU,
nrow = 1, ncol = 2,
# labels = c("A","B"),
common.legend = TRUE, legend = 'none'
)
FDRCombined <- annotate_figure(FDRCombined,
left = grid::textGrob("FDR", rot = 90, hjust = -0.5, vjust = 0.5, gp = gpar(cex = 1)),
bottom = grid::textGrob("PGS Threshold", hjust = 0, gp = gpar(cex = 1)))
#######FDR plot
normalize_PRS <- function(x){
x <- (x - mean(x))/ (sd(x))
return(x)
}
rawSimulationAUC <- readRDS('YRI-PGS-low-h2_2023-04-03.RDS')
FDR_all_simulations <- data.table()
for(testing_population in c('YRI','CEU')){
# testing_population <- 'YRI'
for(repeat_index in 0:(length(rawSimulationAUC[[testing_population]])-1)){
repitition_name <- paste0('rep.', repeat_index)
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation <- melt(raw_PRS_onesimulation,
id.vars = c("ID", "PHENO"),
variable.name = "method",
value.name = "pgs_score")
raw_PRS_onesimulation[, PHENO:= factor(PHENO)]
raw_PRS_onesimulation[, is.case := as.numeric((PHENO == 2))]
raw_PRS_onesimulation[, pgs_score := normalize_PRS(pgs_score), by = "method"]
method_names <- names(rawSimulationAUC[[testing_population]][[repitition_name]])[c(-1, -2)]
####
FDR_all_method <- data.table()
for(method_name_index in 1:length(method_names)){
method_name <- method_names[method_name_index]
#####
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- raw_PRS_onesimulation[method == method_name & pgs_score >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold)]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1 - true_positive/total_positive]
FDR_by_threshold[, method:= method_name]
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
}#one simulation
FDR_all_method$simulation_index <- repeat_index
FDR_all_method$testing_population <- testing_population
FDR_all_simulations <- rbind(FDR_all_simulations, FDR_all_method)
}#all simulations in one setting
}#both populations
FDR_average_simulation <- FDR_all_simulations[, .(mean_FDR = mean(FDR),
mean_total_positive = mean(total_positive),
mean_true_positive = mean(true_positive)),
by = .(threshold, method, testing_population)]
FDR_average_simulation[, mean_false_positive := mean_total_positive - mean_true_positive]
FDR_average_simulation[, plot_legend := as.factor(paste0(method, testing_population))]
change_name <- function(old_name){
if(old_name == 'JLSYRI'){
new_name <- 'JLS(Y&C2Y)'
}else if(old_name == 'LS.CEUYRI'){
new_name <- 'LS(C2Y)'
}else if(old_name == 'TLYRI'){
new_name <- 'TL(Y&C2Y)'
}else if(old_name == 'LS.CEUCEU'){
new_name <- 'LS(C2C)'
}else if(old_name == 'LS.YRIYRI'){
new_name <- 'LS(Y2Y)'
}else  if(old_name == 'WLSYRI'){
new_name <- 'WLS(Y&C2Y)'
}
return(new_name)
}
for(row_index in 1:nrow(FDR_average_simulation)){
FDR_average_simulation[row_index, plot_legend := as.factor(change_name(plot_legend))]
}
#####
break_names <- method_names
low_heritability_FDR <- ggplot( data = FDR_average_simulation[plot_legend != 'WLS(Y&C2Y)'])+
geom_line(aes(x = threshold, y = mean_FDR,
group = plot_legend,
color = plot_legend))+
geom_point(aes(x = threshold, y = mean_FDR,
group = plot_legend,
shape = plot_legend,
color = plot_legend))+
theme_bw()+
# theme(legend.position = 'bottom')+
xlim(c(-2.5, 2.5))+
ylim(c(0, 0.5))+
xlab(NULL)+
ylab(NULL)+
scale_color_manual(name=" ",
values=c("#a2d5c6", "#077b8a", "#5c3c92",
"#d72631","#070601", "#C2C5C6"))+
scale_shape_manual(name=" ",
values = 1:6)+
# ggtitle(paste0("Overlap percentage = ", current_overlap_percentage))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# ggsave(filename = "low_heritability_FDR.pdf",
#        device = "pdf",
#        width = 120, height = 90, units = "mm")
rawSimulationAUC <- readRDS('YRI-PGS-different-h2_2023-04-07.RDS')
FDR_all_simulations <- data.table()
for(testing_population in c('YRI','CEU')){
# testing_population <- 'YRI'
for(repeat_index in 0:(length(rawSimulationAUC[[testing_population]])-1)){
repitition_name <- paste0('rep.', repeat_index)
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation <- melt(raw_PRS_onesimulation,
id.vars = c("ID", "PHENO"),
variable.name = "method",
value.name = "pgs_score")
raw_PRS_onesimulation[, PHENO:= factor(PHENO)]
raw_PRS_onesimulation[, is.case := as.numeric((PHENO == 2))]
raw_PRS_onesimulation[, pgs_score := normalize_PRS(pgs_score), by = "method"]
method_names <- names(rawSimulationAUC[[testing_population]][[repitition_name]])[c(-1, -2)]
####
FDR_all_method <- data.table()
for(method_name_index in 1:length(method_names)){
method_name <- method_names[method_name_index]
#####
FDR_by_threshold <- data.table()
for(threshold in seq(-4, 4, length = 50)){
temp_table <- raw_PRS_onesimulation[method == method_name & pgs_score >= threshold,
.(total_positive = .N,
true_positive = sum(is.case),
threshold = threshold)]
FDR_by_threshold <- rbind(FDR_by_threshold,
temp_table)
}
FDR_by_threshold[, FDR:= 1 - true_positive/total_positive]
FDR_by_threshold[, method:= method_name]
#####
FDR_all_method <- rbind(FDR_all_method, FDR_by_threshold)
}#one simulation
FDR_all_method$simulation_index <- repeat_index
FDR_all_method$testing_population <- testing_population
FDR_all_simulations <- rbind(FDR_all_simulations, FDR_all_method)
}#all simulations in one setting
}#both populations
FDR_average_simulation <- FDR_all_simulations[, .(mean_FDR = mean(FDR),
mean_total_positive = mean(total_positive),
mean_true_positive = mean(true_positive)),
by = .(threshold, method, testing_population)]
FDR_average_simulation[, mean_false_positive := mean_total_positive - mean_true_positive]
FDR_average_simulation[, plot_legend := as.factor(paste0(method, testing_population))]
change_name <- function(old_name){
if(old_name == 'JLSYRI'){
new_name <- 'JLS(Y&C2Y)'
}else if(old_name == 'LS.CEUYRI'){
new_name <- 'LS(C2Y)'
}else if(old_name == 'TLYRI'){
new_name <- 'TL(Y&C2Y)'
}else if(old_name == 'LS.CEUCEU'){
new_name <- 'LS(C2C)'
}else if(old_name == 'LS.YRIYRI'){
new_name <- 'LS(Y2Y)'
}else  if(old_name == 'WLSYRI'){
new_name <- 'WLS(Y&C2Y)'
}
return(new_name)
}
for(row_index in 1:nrow(FDR_average_simulation)){
FDR_average_simulation[row_index, plot_legend := as.factor(change_name(plot_legend))]
}
#####
break_names <- method_names
series_700_FDR <- ggplot( data = FDR_average_simulation[plot_legend != 'WLS(Y&C2Y)'])+
geom_line(aes(x = threshold, y = mean_FDR,
group = plot_legend,
color = plot_legend))+
geom_point(aes(x = threshold, y = mean_FDR,
group = plot_legend,
shape = plot_legend,
color = plot_legend))+
theme_bw()+
# theme(legend.position = 'bottom')+
xlim(c(-2.5, 2.5))+
ylim(c(0, 0.5))+
xlab(NULL)+
ylab(NULL)+
scale_color_manual(name=" ",
values=c("#a2d5c6", "#077b8a", "#5c3c92",
"#d72631","#070601", "#C2C5C6"))+
scale_shape_manual(name=" ",
values = 1:6)+
# ggtitle(paste0("Overlap percentage = ", current_overlap_percentage))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
FDRCombined<- ggarrange(
low_heritability_FDR, series_700_FDR,
# mainCEU,
nrow = 1, ncol = 2,
# labels = c("A","B"),
common.legend = TRUE, legend = 'none'
)
FDRCombined <- annotate_figure(FDRCombined,
left = grid::textGrob("FDR", rot = 90, hjust = -0.5, vjust = 0.5, gp = gpar(cex = 1)),
bottom = grid::textGrob("PGS Threshold", hjust = 0, gp = gpar(cex = 1)))
ggsave(filename = "low_heritability_FDR.pdf",
device = "pdf",
width = 200, height = 90, units = "mm")
FDRCombined
FDRCombined <- annotate_figure(FDRCombined,
left = grid::textGrob("FDR", rot = 90, hjust = -0.5, vjust = 0.5, gp = gpar(cex = 1)),
bottom = grid::textGrob("PGS Threshold", hjust = 0.5, gp = gpar(cex = 1)))
FDRCombined
FDRCombined<- ggarrange(
low_heritability_FDR, series_700_FDR,
# mainCEU,
nrow = 1, ncol = 2,
# labels = c("A","B"),
common.legend = TRUE, legend = 'none'
)
FDRCombined <- annotate_figure(FDRCombined,
left = grid::textGrob("FDR", rot = 90, hjust = -0.5, vjust = 0.5, gp = gpar(cex = 1)),
bottom = grid::textGrob("PGS Threshold", hjust = 0.5, gp = gpar(cex = 1)))
ggsave(filename = "low_heritability_FDR.pdf",
device = "pdf",
width = 200, height = 90, units = "mm")
FDRCombined<- ggarrange(
low_heritability_FDR, series_700_FDR,
# mainCEU,
nrow = 1, ncol = 2,
# labels = c("A","B"),
common.legend = TRUE, legend = 'top'
)
FDRCombined <- annotate_figure(FDRCombined,
left = grid::textGrob("FDR", rot = 90, hjust = -0.5, vjust = 0.5, gp = gpar(cex = 1)),
bottom = grid::textGrob("PGS Threshold", hjust = 0.5, gp = gpar(cex = 1)))
ggsave(filename = "low_heritability_FDR.pdf",
device = "pdf",
width = 200, height = 90, units = "mm")
